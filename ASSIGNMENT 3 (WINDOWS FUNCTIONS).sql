-- ASSIGNMENT 
-- WINDOWS FUNCTIONS
-- RAANK THE CUSTOMERS BASED ON THE TOTAL AMOUNT THEY HAVE SPENT ON RENTALS

WITH CUSTOMER_RANKING AS (
    SELECT 
        CUSTOMER_ID,
        SUM(AMOUNT) AS TOTAL_AMOUNT_SPENT,
        RANK() OVER (ORDER BY SUM(AMOUNT) DESC) AS CUSTOMER_RANK
    FROM PAYMENT
    GROUP BY CUSTOMER_ID
)
SELECT CUSTOMER_ID, TOTAL_AMOUNT_SPENT, CUSTOMER_RANK
FROM CUSTOMER_RANKING;

-- CALCULATE THE CUMULATIVE REVENUE GENERATED BY EACH FILM OVER TIME
select film_id, title , rental_date, amount, sum(amount) over( partition by film_id order by rental_date) as cumulative_revenue
from( select f.film_id , f.title, r.rental_date, p.amount from film f
join inventory i on f.film_id = i.film_id
join rental r on r.inventory_id = i.inventory_id
join payment p on p.rental_id = r.rental_id)
as film_revenue;

-- DETERMINE THE AVERAGE RENTAL_DURATION FOR EACH FILM , CONSIDERING THE FILMS WITH SIMILAR LENGTHS
select film_id , title , rental_duration , avg(rental_duration) over
( partition by rental_duration order by film_id)
 as avg_rental_duration
 from film;
 
 -- IDENTIFY THE TOP 3 FILMS IN EACH CATEGORY BASED ON THEIR RENTAL COUNTS
 SELECT category_id, film_id, title, rental_count, rank_in_category
FROM (
    SELECT
        fc.category_id,
        f.film_id,
        f.title,
        COUNT(r.rental_id) AS rental_count,
        RANK() OVER (PARTITION BY fc.category_id ORDER BY COUNT(r.rental_id) DESC) AS rank_in_category
    FROM
        film f
        JOIN film_category fc ON f.film_id = fc.film_id
        JOIN inventory i ON i.film_id = f.film_id
        JOIN rental r ON r.inventory_id = i.inventory_id
    GROUP BY fc.category_id, f.film_id, f.title
) AS category_film_rentals
WHERE rank_in_category <= 3;

-- FIND THE MOONTHLY REVENUE TREND FOR THE ENTIRE RENTAL STORE OVER TIME
select payment_date , sum(amount) over(order by payment_date) as revenue from payment group by payment_date;

--  CALCULATE THE TOTAL RENTALS PER CATEGORY ORDERED BY RENTAL COUNT
SELECT category_id, film_id, title, rental_count,
SUM(rental_count) OVER (PARTITION BY category_id ORDER BY rental_count) AS
running_total
FROM (
SELECT fc.category_id, f.film_id, f.title, COUNT(r.rental_id) AS rental_count
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY fc.category_id, f.film_id, f.title
) AS category_film_rentals;

--  FIND THE FILMS THAT HAVE BEEN RENTED LESS THAN THE AVERAGE RENTAL COUNT FOR THEIR RESPECTIVE CATEGORIES
SELECT category_id, film_id, title, rental_count,
AVG(rental_count) OVER (PARTITION BY category_id) AS avg_rental_count
FROM (
SELECT fc.category_id, f.film_id, f.title, COUNT(r.rental_id) AS rental_count
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY fc.category_id, f.film_id, f.title
) AS category_film_rentals
WHERE rental_count < AVG(rental_count) OVER (PARTITION BY category_id);

-- identify the top 5 months with the highest revenue and display the revenue generated in each month
SELECT payment_month, monthly_revenue
FROM (
SELECT DATE_FORMAT(payment_date, '%Y-%m') AS payment_month,
SUM(amount) AS monthly_revenue,
RANK() OVER (ORDER BY SUM(amount) DESC) AS revenue_rank
FROM payment
GROUP BY DATE_FORMAT(payment_date, '%Y-%m')
) AS monthly_revenues
WHERE revenue_rank <= 5;
